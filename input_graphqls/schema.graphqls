# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type UserGroup {
  # 担当所属グループ
  id: UUID!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UserRole {
  # 担当権限
  id: UUID!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type User {
  # 担当者
  id: UUID!
  name: String!
  group: UserGroup
  role: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

type Customer {
  # 得意先
  id: UUID!
  name: String!
  nickname: String
  email: String
  phone: String
  zipCode: String
  # 郵便番号
  address: String
  # 住所
  addressBuilding: String
  # 建物名
  orderClass: String
  # 受注区分
  representUser: User
  # 担当者
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductStock {
  # 完成品在庫
  id: UUID!
  number: Int!
  # 在庫数
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductStockTransaction {
  # 完成品在庫トランザクション
  id: UUID!
  productStock: ProductStock!
  beforeNumber: Int
  # 前在庫数
  afterNumber: Int
  # 後在庫数
  createdAt: DateTime
  updatedAt: DateTime
}

type MaterialStock {
  # 材料在庫
  id: UUID!
  number: Int!
  # 在庫数
  createdAt: DateTime
  updatedAt: DateTime
}

type MaterialStockTransaction {
  # 材料在庫トランザクション
  id: UUID!
  materialStock: MaterialStock!
  beforeNumber: Int
  # 前在庫数
  afterNumber: Int
  # 後在庫数
  createdAt: DateTime
  updatedAt: DateTime
}

type Component {
  # 部品
  id: UUID!
  customer: Customer!
  # 得意先
  partId: UUID!
  # 品番UUID
  partNumber: String
  # 品番
  shortPartNumber: String
  # 背番
  name: String
  # 品名
  isPrototype: Boolean
  # 試作品
  platingStandard: String
  # めっき規格
  filmThicknessStandard: String
  # 膜厚規格
  minimumFilmThickness: Float
  # 膜厚上限:μm固定
  maximumFilmThickness: Float
  # 膜厚下限:μm固定
  bakingStandard: String
  # ベーキング規格
  platingColor: String
  # めっき色
  electricCurrentValue: Float
  # 電流値
  electricCurrentDensity: Float
  # 電流密度
  container: String
  # 収容箱
  sheetNumber: Int
  # 敷き紙枚数
  surfaceArea: Float
  # 表面積:dm2 固定
  weight: Float
  # 重量: g 固定
  thickness: Float
  # 板厚: mm 固定
  material: String
  # 材質
  productShape: String
  # 製品形状
  thickeningTime: Float
  # 厚付け時間: s 固定
  fallPrevention: String
  # 落下防止
  management: String
  # 管理項目
  welding: String
  # 溶接

  # 営業
  materialPrice: Float
  # 材料単価
  processCost: Float
  # 加工単価
  chemicalCost: Float
  # 内薬剤費
  laborCost: Float
  # 内労務費
  salesManagementCost: Float
  # 内販管費
  processExpense: Float
  # 内製造経費
  outsourcingPrice: Float
  # 外注単価
  salesPrice: Float
  # 販売単価
  leadTime: String
  # リードタイム
  minimumProductionUnitNumber: Int
  # 仕掛け数(最小)
  averageProductionUnitNumber: Int
  # 仕掛け数(基準)
  maximumProductionUnitNumber: Int
  # 仕掛け数(最大
  annualProductionNumber: Int
  # 基準数(年間)
  monthlyProductionNumber: Int
  # 基準数(月間)
  dailyProductionNumber: Int
  # 基準数(日間)
  salesLog: String
  # 営業備忘録
  measurement: String
  # 計量
  drying: String
  # 乾燥
  salesTax: Float
  # 消費税率 %
  salesComment: String
  # 営業備忘録
  bluePrintURL: String
  # 設計図URL
  airBlow: String
  # エアブロー
  shippingPallet: String
  # 出荷パレット
  preProcesses: String
  # 前処理
  postProcesses: String
  # 後処理
  ultrasonic: String
  # 超音波
  shaking: String
  # 揺動設定
  dehydration: String
  # 脱水設定
  standardDocumentURL: String
  # 標準書URL
  receiveTime: Float
  # 入荷時間: min 固定
  shippingTime: Float
  # 出荷時間: min 固定
  setupTime: Float
  # 仕掛け標準時間: min 固定
  removalTime: Float
  # 取り外し標準時間: min 固定
  inspectionTime: Float
  # 検査標準時間: min 固定
  inspectionRank: String
  # 検査ランク
  isDiscontinued: Boolean
  # 生産中止
  productStock: ProductStock
  # 完成品在庫
  materialStock: MaterialStock
  # 材料在庫
  manufacturingLog: String
  # 製造備忘録
  salesUpdateComment: String
  # 営業更新
  manufacturingUpdateComment: String
  # 製造更新
  creator: User
  # 登録者
  updater: User
  # 更新者
  updatedDate: DateTime
  # 更新日
  createdDate: DateTime
  # 登録日
  componentImages: [ComponentImage]
  # 部品画像
  componentManufacturingTips: [ComponentManufacturingTip]
  # 作業ポイント
  lineConfigs: [LineConfig]
  # ライン設定
  createdAt: DateTime
  updatedAt: DateTime
}

type ComponentImage {
  # 部品画像
  id: UUID!
  partId: UUID
  # 品番UUID
  name: String
  # 製品画像名
  reference: String
  # URL
  createdAt: DateTime
  updatedAt: DateTime
}

type ComponentManufacturingTip {
  # 作業ポイント
  id: UUID!
  partId: UUID
  # 品番UUID
  description: String!
  # 説明
  createdAt: DateTime
  updatedAt: DateTime
}

type FactoryLine {
  # 工場ライン
  id: UUID!
  name: String!
  # 製造ライン名
  machine: String
  # ハンガーかバレルか
  createdAt: DateTime
  updatedAt: DateTime
}

type JigHanger {
  # 治具ハンガー
  id: UUID!
  name: String!
  # ハンガー名
  step: Int
  # 段数
  row: Int
  # 本列
  hook: Int
  # 掛け数
  createdAt: DateTime
  updatedAt: DateTime
}

type JigBarrel {
  # 治具バレル
  id: UUID!
  code: String!
  # バレルコード
  createdAt: DateTime
  updatedAt: DateTime
}

type LineConfig {
  # 製造ライン設定
  id: UUID!
  partId: UUID
  # 品番UUID
  factoryLine: FactoryLine
  # 製造ライン
  jigHanger: JigHanger
  # ハンガー
  jigBarrel: JigBarrel
  # バレル
  jigStock: Int
  # 治具在庫
  description: String
  # 説明
  createdAt: DateTime
  updatedAt: DateTime
}

type Order {
  # 受注
  id: UUID!
  customer: Customer!
  # 得意先
  representUser: User
  # 担当者
  inputUser: User
  # 入力者
  component: Component!
  # 部品
  orderDate: DateTime
  # 受注日
  inputDate: DateTime
  # 入力日
  deadline: DateTime
  # 納期
  productionNumber: Int
  # 受注数
  planProductionNumber: Int
  # 生産予定数
  boxNumber: Int
  # 箱数
  numberInBox: Int
  # 1箱収容数
  boxTypeId: String
  # 箱種
  orderClass: OrderClass
  # 受注区分
  isPrototype: Boolean
  # 試作品
  delivery: String
  # 便
  commnet: String
  # 備考
  state: OrderState!
  # 受注状態
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderClass {
  # 受注区分
  id: UUID!
  name: String!
  # 受注区分名
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderState {
  # 受注状態
  id: UUID!
  state: String!
  # 状態
  createdAt: DateTime
  updatedAt: DateTime
}

type Instruction {
  # 指示書
  id: UUID!
  order: Order!
  # 受注
  isReplating: Boolean!
  # 再めっき
  manufacturingNumber: String!
  # 製番
  qrCode: String
  # QRコード
  planProductionNumber: Int
  # 生産予定数
  boxNumber: Int
  # 箱数
  numberInBox: Int
  # 1箱収容数
  customer: Customer!
  # 得意先
  componentId: UUID!
  # 製造部品UUID
  componentPartId: UUID
  # 品番UUID
  componentShortPartId: String
  # 背番
  componentName: String
  # 品名
  componentIsPrototype: Boolean
  # 試作品
  componentPlatingStandard: String
  # めっき規格
  componentFilmThicknessStandard: String
  # 膜厚規格
  componentMinimumFilmThickness: Float
  # 膜厚上限:μm固定
  componentMaximumFilmThickness: Float
  # 膜厚下限:μm固定
  componentBakingStandard: String
  # ベーキング規格
  componentPlatingColor: String
  # めっき色
  componentElectricCurrentValue: Float
  # 電流値
  componentElectricCurrentDensity: Float
  # 電流密度
  componentContainer: String
  # 収容箱
  componentSheetNumber: Int
  # 敷き紙枚数
  componentSurfaceArea: Float
  # 表面積:dm2 固定
  componentWeight: Float
  # 重量: g 固定
  componentThickness: Float
  # 板厚: mm 固定
  componentMaterial: String
  # 材質
  componentProductShape: String
  # 製品形状
  componentThickeningTime: Float
  # 厚付け時間: s 固定
  componentFallPrevention: String
  # 落下防止
  componentManagement: String
  # 管理項目
  componentWelding: String
  # 溶接

  # 営業
  componentMaterialPrice: Float
  # 材料単価
  componentProcessCost: Float
  # 加工単価
  componentChemicalCost: Float
  # 内薬剤費
  componentLaborCost: Float
  # 内労務費
  componentSalesManagementCost: Float
  # 内販管費
  componentProcessExpense: Float
  # 内製造経費
  componentOutsourcingPrice: Float
  # 外注単価
  componentSalesPrice: Float
  # 販売単価
  componentLeadTime: String
  # リードタイム
  componentMinimumProductionUnitNumber: Int
  # 仕掛け数(最小)
  componentAverageProductionUnitNumber: Int
  # 仕掛け数(基準)
  componentMaximumProductionUnitNumber: Int
  # 仕掛け数(最大
  componentAnnualProductionNumber: Int
  # 基準数(年間)
  componentMonthlyProductionNumber: Int
  # 基準数(月間)
  componentDailyProductionNumber: Int
  # 基準数(日間)
  componentSalesLog: String
  # 営業備忘録
  componentMeasurement: String
  # 計量
  componentDrying: String
  # 乾燥
  componentSalesTax: Float
  # 消費税率 %
  componentSalesComment: String
  # 営業備忘録
  componentBluePrintURL: String
  # 設計図URL
  componentAirBlow: String
  # エアブロー
  componentShippingPallet: String
  # 出荷パレット
  componentPreProcesses: String
  # 前処理
  componentPostProcesses: String
  # 後処理
  componentUltrasonic: String
  # 超音波
  componentShaking: String
  # 揺動設定
  componentDehydration: String
  # 脱水設定
  componentStandardDocumentURL: String
  # 標準書URL
  componentReceiveTime: Float
  # 入荷時間: min 固定
  componentShippingTime: Float
  # 出荷時間: min 固定
  componentSetupTime: Float
  # 仕掛け標準時間: min 固定
  componentRemovalTime: Float
  # 取り外し標準時間: min 固定
  componentInspectionTime: Float
  # 検査標準時間: min 固定
  componentInspectionRank: String
  # 検査ランク
  componentIsDiscontinued: Boolean
  # 生産中止
  componentProductStock: ProductStock
  # 完成品在庫
  componentMaterialStock: MaterialStock
  # 材料在庫
  componentManufacturingLog: String
  # 製造備忘録
  componentSalesUpdateComment: String
  # 営業更新
  componentManufacturingUpdateComment: String
  # 製造更新
  componentCreator: User
  # 登録者
  componentUpdater: User
  # 更新者
  componentUpdatedDate: DateTime
  # 更新日
  componentCreatedDate: DateTime
  # 登録日
  lineConfig: LineConfig
  # ライン設定

  # この指示書について
  creator: User
  # 登録者
  updater: User
  # 更新者
  updatedDate: DateTime
  # 更新日
  createdDate: DateTime
  # 登録日
  commnet: String
  # 備考
  createdAt: DateTime
  updatedAt: DateTime
}

type Operation {
  # 作業実績
  id: UUID!
  instruction: Instruction!
  # 指示書
  inputDate: DateTime
  # 入力日
  startDate: DateTime
  # 開始日
  endDate: DateTime
  # 終了日
  inputUser: User
  # 担当者
  planNumber: Int
  # 予定数
  discardNumber: Int
  # 棄却数
  replatingNumber: Int
  # 再めっき数
  goodNumber: Int
  # 良品数
  state: OperationState!
  # 状態
  badDetails: [OperationBadDetail]
  # 不良詳細
  comment: String
  # 備考
  createdAt: DateTime
  updatedAt: DateTime
}

type OperationState {
  # 作業状態
  id: UUID!
  state: String!
  # 状態
  createdAt: DateTime
  updatedAt: DateTime
}

type OperationBadDetail {
  # 作業不良詳細
  id: UUID!
  operationId: UUID
  # 作業実績UUID
  reason: BadDetailReason!
  # 不良理由
  number: Int!
  # 数量
  isDiscard: Boolean!
  # 棄却
  createdAt: DateTime
  updatedAt: DateTime
}

type BadDetailReason {
  # 不良理由
  id: UUID!
  reason: String!
  # 理由
  createdAt: DateTime
  updatedAt: DateTime
}

type Shipping {
  # 出荷
  id: UUID!
  order: Order!
  # 注文
  shippingDate: DateTime
  # 出荷日
  shippingNumber: Int
  # 出荷数
  shippingBoxNumber: Int
  # 出荷箱数
  createdAt: DateTime
  updatedAt: DateTime
}

type Receipt {
  # 納品書
  id: UUID!
  customer: Customer!
  # 得意先
  shippingDate: DateTime
  # 納品日
  delivery: String
  # 便
  method: String
  # 発行方法
  createdDate: DateTime
  # 発行日
  createdAt: DateTime
  updatedAt: DateTime
}

type Billing {
  # 請求書
  id: UUID!
  customer: Customer!
  # 得意先
  order: Order!
  # 注文
  deadline: DateTime
  # 締日
  createdAt: DateTime
  updatedAt: DateTime
}
